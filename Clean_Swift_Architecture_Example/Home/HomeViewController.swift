//
//  HomeViewController.swift
//  Clean_Swift_Architecture_Example
//
//  Created by ADMIN on 21/05/20.
//  Copyright (c) 2020 Success Resource Pte Ltd.. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: class
{
    func displayParsedImageList(viewModel: Home.ImageList.Response.ImageListModel)
}

class HomeViewController: UIViewController, HomeDisplayLogic
{
  var interactor: HomeBusinessLogic?
  var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    var homePageViewModel: Home.ImageList.Response.ImageListModel = Home.ImageList.Response.ImageListModel()
    
    let imageGrid: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        layout.scrollDirection = .vertical
        layout.minimumInteritemSpacing = 2.0
        layout.minimumLineSpacing = 2.0
        collectionView.backgroundColor = .white
        collectionView.register(ImageCell.self, forCellWithReuseIdentifier: "ImageCell")
        collectionView.register(SpinnerCell.self, forCellWithReuseIdentifier: "SpinnerCell")
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        return collectionView
    }()
    
    var spinner: UIActivityIndicatorView = {
        let spinner = UIActivityIndicatorView(style: .medium)
        spinner.translatesAutoresizingMaskIntoConstraints = false
        return spinner
    }()
    
    var fetchingMore = false

    var searchKeyword = ""
    
    var currentSearchPage = 1
    
    
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = HomeInteractor()
    let presenter = HomePresenter()
    let router = HomeRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    
    self.view.backgroundColor = .white
    
    self.navigationController?.navigationBar.topItem?.title = "Gallery"
    
    setupSpinner()
    
    
    imageGrid.delegate = self
    imageGrid.dataSource = self
    
    sendHomeRequestToServer()
//    setupImageGrid()
    setupSearchBtn()
  }
    
    func setupSearchBtn() {
        let rightBtn = UIBarButtonItem(image: UIImage(systemName: "magnifyingglass"), style: .plain, target: self, action: #selector(tapSearchBtn))
        self.navigationItem.rightBarButtonItem = rightBtn
    }
    
    @objc func tapSearchBtn(){
        let router = HomeRouter()
        let imageSearchViewController = ImageSearchViewController()
        imageSearchViewController.sendSearchKeywordDelegate = self
        router.navigateToSearchViewController(source: self, destination: imageSearchViewController)
    }
  
  // MARK: Do something
  
  func sendHomeRequestToServer()
  {
    let request = Home.ImageList.Request.HomePage()
    interactor?.getParsedJSONList(request: request)
  }
  
  func displayParsedImageList(viewModel: Home.ImageList.Response.ImageListModel)
  {
    if searchKeyword == "" {
        homePageViewModel.append(contentsOf: viewModel)
        DispatchQueue.main.async {
            self.spinner.stopAnimating()
            self.setupImageGrid()
            self.imageGrid.reloadData()
            self.fetchingMore = false
        }
    }else{
        homePageViewModel.append(contentsOf: viewModel)
        DispatchQueue.main.async {
            self.spinner.stopAnimating()
            self.imageGrid.isHidden = false
            self.imageGrid.reloadData()
            self.fetchingMore = false
        }
    }
    
  }
}

extension HomeViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout, SendSearchKeywordDelegate{
    
    func setupSpinner() {
        self.view.addSubview(spinner)
        spinner.startAnimating()
        NSLayoutConstraint.activate([
            spinner.centerXAnchor.constraint(equalTo: self.view.centerXAnchor),
            spinner.centerYAnchor.constraint(equalTo: self.view.centerYAnchor),
        ])
    }
    
    func setupImageGrid() {
        self.view.addSubview(imageGrid)
        NSLayoutConstraint.activate([
            imageGrid.topAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.topAnchor),
            imageGrid.leftAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.leftAnchor),
            imageGrid.rightAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.rightAnchor),
            imageGrid.bottomAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.bottomAnchor),
        ])
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        if indexPath.section == 0 {
            return CGSize(width: imageGrid.frame.width/2.01, height: imageGrid.frame.width/2)
        }else{
            return CGSize(width: imageGrid.frame.width, height: 54)
        }
    }
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        2
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if section == 0 {
            return homePageViewModel.count
        }else if section == 1 {
            return 1
        }
        return 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        if indexPath.section == 0 {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "ImageCell", for: indexPath) as! ImageCell
            cell.descriptionLabel.text = homePageViewModel[indexPath.item].altDescription
            cell.nameLabel.text = homePageViewModel[indexPath.item].user?.name
            
            guard let thumbURL = URL(string: (homePageViewModel[indexPath.item].urls?.thumb)!) else { return cell }
            let data = try? Data(contentsOf: thumbURL)
            if let imageData = data {
                let image = UIImage(data: imageData)
                cell.imageView.image = image
            }
            
            let attachment = NSTextAttachment()
            attachment.image = UIImage(systemName: "hand.thumbsup.fill")
            let attachmentString = NSAttributedString(attachment: attachment)
            guard let likes = homePageViewModel[indexPath.item].likes else { return cell }
            let myString = NSMutableAttributedString(string: "\(likes) ")
            myString.append(attachmentString)
            cell.likeView.attributedText = myString
            cell.likeView.font = .systemFont(ofSize: 12)
            
            return cell
        } else {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "SpinnerCell", for: indexPath) as! SpinnerCell
            cell.spinner.startAnimating()
            return cell
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if indexPath.section == 0 {
            let router = HomeRouter()
            var cell = collectionView.cellForItem(at: indexPath) as? ImageCell
            for i in 0...homePageViewModel.count-1 {
                cell = collectionView.cellForItem(at: IndexPath(item: i, section: 0)) as? ImageCell
                if i == indexPath.item {
                    cell?.hero.id = "tapanimation"
                }else{
                    cell?.hero.id = ""
                }
            }
            router.navigateToDetailsViewController(source: self, destination: DetailsViewController())
        }
    }
    
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let offsetY = scrollView.contentOffset.y
        let contentHeight = scrollView.contentSize.height
        if contentHeight != 0 {
            if offsetY > contentHeight - scrollView.frame.height {
                if !fetchingMore {
                    beginFetching()
                }
            }
        }
    }
    func beginFetching(){
        fetchingMore = true
        if searchKeyword == "" {
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.25) {
                let request = Home.ImageList.Request.HomePage()
                self.interactor?.getParsedJSONList(request: request)
            }
        }else{
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.25) {
                var request = Home.ImageList.Request.SearchAction()
                request.unsplashSearchURL += self.searchKeyword + "&page=\(self.currentSearchPage)"
                self.currentSearchPage += 1
                self.interactor?.getImageSearchJSONList(request: request)
            }
        }
    }
    
    func didSendSearchKeyword(_ keyword: String) {
        searchKeyword = keyword.replacingOccurrences(of: " ", with: "%20")
        searchKeyword += "&page=\(currentSearchPage)"
        currentSearchPage += 1
        homePageViewModel.removeAll()
        imageGrid.isHidden = true
        spinner.startAnimating()
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.25) {
            var request = Home.ImageList.Request.SearchAction()
            request.unsplashSearchURL += self.searchKeyword
            self.interactor?.getImageSearchJSONList(request: request)
        }
    }
}
