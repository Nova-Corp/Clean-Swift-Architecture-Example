//
//  HomeViewController.swift
//  Clean_Swift_Architecture_Example
//
//  Created by ADMIN on 21/05/20.
//  Copyright (c) 2020 Success Resource Pte Ltd.. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: class
{
    func displayParsedImageList(viewModel: Home.ImageList.Response.ImageListModel)
}

class HomeViewController: UIViewController, HomeDisplayLogic
{
  var interactor: HomeBusinessLogic?
  var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    var homePageViewModel: Home.ImageList.Response.ImageListModel = Home.ImageList.Response.ImageListModel()
    
    let imageGrid: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        layout.scrollDirection = .vertical
        layout.minimumInteritemSpacing = 2.0
        layout.minimumLineSpacing = 2.0
        collectionView.backgroundColor = .white
        collectionView.register(ImageCell.self, forCellWithReuseIdentifier: "ImageCell")
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        return collectionView
    }()

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = HomeInteractor()
    let presenter = HomePresenter()
    let router = HomeRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    
    self.view.backgroundColor = .white
    
    self.navigationController?.navigationBar.topItem?.title = "Gallery"
    setupImageGrid()
    
    
    imageGrid.delegate = self
    imageGrid.dataSource = self
    
    sendRequestToServer()
  }
  
  // MARK: Do something
  
  func sendRequestToServer()
  {
    let request = Home.ImageList.Request()
    interactor?.getParsedJSONList(request: request)
  }
  
  func displayParsedImageList(viewModel: Home.ImageList.Response.ImageListModel)
  {
    homePageViewModel = viewModel
    DispatchQueue.main.async {
        self.imageGrid.reloadData()
    }
  }
}

extension HomeViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout{
    func setupImageGrid() {
        self.view.addSubview(imageGrid)
        
        NSLayoutConstraint.activate([
            imageGrid.topAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.topAnchor),
            imageGrid.leftAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.leftAnchor),
            imageGrid.rightAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.rightAnchor),
            imageGrid.bottomAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.bottomAnchor),
        ])
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        CGSize(width: imageGrid.frame.width/2.01, height: imageGrid.frame.width/2)
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        homePageViewModel.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "ImageCell", for: indexPath) as! ImageCell
        cell.descriptionLabel.text = homePageViewModel[indexPath.item].altDescription
        cell.nameLabel.text = homePageViewModel[indexPath.item].user?.name
        
        guard let thumbURL = URL(string: (homePageViewModel[indexPath.item].urls?.thumb)!) else { return cell }
        let data = try? Data(contentsOf: thumbURL)
        if let imageData = data {
            let image = UIImage(data: imageData)
            cell.imageView.image = image
        }
        cell.likeView.image = #imageLiteral(resourceName: "favorite")
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let router = HomeRouter()
        router.navigateToDetailsViewController(source: self, destination: DetailsViewController())
    }
}
